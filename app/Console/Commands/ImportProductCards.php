<?php

declare(strict_types=1);

namespace App\Console\Commands;

use App\Models\ProductCard;
use App\Models\Seller;
use App\Services\WildberriesApiService;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class ImportProductCards extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'wb:import-cards {--seller-id= : ID –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–æ–¥–∞–≤—Ü–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞} {--limit=100 : –õ–∏–º–∏—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = '–ò–º–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ API Wildberries —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π';

    private WildberriesApiService $apiService;

    public function __construct(WildberriesApiService $apiService)
    {
        parent::__construct();
        $this->apiService = $apiService;
    }

    /**
     * Execute the console command.
     */
    public function handle(): int
    {
        $this->info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ Wildberries...');

        $sellerId = $this->option('seller-id');
        $limit = (int) $this->option('limit');

        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        if ($sellerId) {
            $sellers = Seller::where('id', $sellerId)->get();
            if ($sellers->isEmpty()) {
                $this->error("‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü —Å ID {$sellerId} –Ω–µ –Ω–∞–π–¥–µ–Ω");
                return Command::FAILURE;
            }
        } else {
            $sellers = Seller::whereNotNull('api_key')->get();
        }

        if ($sellers->isEmpty()) {
            $this->error('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ —Å API –∫–ª—é—á–∞–º–∏');
            return Command::FAILURE;
        }

        $this->info("üìã –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: {$sellers->count()}");

        $totalProcessed = 0;
        $totalUpdated = 0;
        $totalCreated = 0;
        $totalErrors = 0;

        foreach ($sellers as $seller) {
            $this->processSellerCards($seller, $limit, $totalProcessed, $totalUpdated, $totalCreated, $totalErrors);
        }

        $this->newLine();
        $this->info('‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!');
        $this->table(
            ['–ú–µ—Ç—Ä–∏–∫–∞', '–ó–Ω–∞—á–µ–Ω–∏–µ'],
            [
                ['–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', $totalProcessed],
                ['–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤—ã—Ö', $totalCreated],
                ['–û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö', $totalUpdated],
                ['–û—à–∏–±–æ–∫', $totalErrors],
            ]
        );

        return Command::SUCCESS;
    }

    private function processSellerCards(
        Seller $seller,
        int $limit,
        int &$totalProcessed,
        int &$totalUpdated,
        int &$totalCreated,
        int &$totalErrors
    ): void {
        $this->info("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–∞–≤—Ü–∞: {$seller->title} (ID: {$seller->id})");

        $apiKey = $seller->getDecryptedApiKey();
        if (!$apiKey) {
            $this->warn("‚ö†Ô∏è  –£ –ø—Ä–æ–¥–∞–≤—Ü–∞ {$seller->id} –Ω–µ—Ç API –∫–ª—é—á–∞ –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –µ–≥–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å");
            return;
        }

        $processedCount = 0;
        $createdCount = 0;
        $updatedCount = 0;
        $errorCount = 0;
        $pageCount = 0;

        $progressBar = $this->output->createProgressBar();
        $progressBar->setFormat(' %current% –∫–∞—Ä—Ç–æ—á–µ–∫ | %message%');
        $progressBar->setMessage('–ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏...');
        $progressBar->start();

        try {
            foreach ($this->apiService->getAllProductCards($apiKey, $limit) as $cardData) {
                try {
                    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    if ($processedCount % $limit === 0) {
                        $pageCount++;
                        $progressBar->setMessage("–°—Ç—Ä–∞–Ω–∏—Ü–∞ {$pageCount} | –°–æ–∑–¥–∞–Ω–æ: {$createdCount}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {$updatedCount}, –û—à–∏–±–æ–∫: {$errorCount}");
                    }

                    $transformedData = $this->apiService->transformCardData($cardData, $seller->id);

                    if (!$transformedData['nm_id']) {
                        $this->warn("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –±–µ–∑ nm_id");
                        $errorCount++;
                        continue;
                    }

                    DB::beginTransaction();

                    $productCard = ProductCard::updateOrCreate(
                        [
                            'seller_id' => $seller->id,
                            'nm_id' => $transformedData['nm_id']
                        ],
                        $transformedData
                    );

                    if ($productCard->wasRecentlyCreated) {
                        $createdCount++;
                    } else {
                        $updatedCount++;
                    }

                    DB::commit();
                    $processedCount++;

                } catch (\Exception $e) {
                    DB::rollBack();
                    $errorCount++;

                    Log::error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞', [
                        'seller_id' => $seller->id,
                        'card_data' => $cardData,
                        'error' => $e->getMessage()
                    ]);
                }

                $progressBar->advance();
                $progressBar->setMessage("–°–æ–∑–¥–∞–Ω–æ: {$createdCount}, –û–±–Ω–æ–≤–ª–µ–Ω–æ: {$updatedCount}, –û—à–∏–±–æ–∫: {$errorCount}");
            }

        } catch (\Exception $e) {
            $this->error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞ {$seller->id}: {$e->getMessage()}");
            Log::error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–∞—Ä—Ç–æ—á–µ–∫', [
                'seller_id' => $seller->id,
                'error' => $e->getMessage()
            ]);
        }

        $progressBar->finish();

        $this->newLine();

        $this->info("üìä –ü—Ä–æ–¥–∞–≤–µ—Ü {$seller->id}: –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {$processedCount}, —Å–æ–∑–¥–∞–Ω–æ {$createdCount}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {$updatedCount}, –æ—à–∏–±–æ–∫ {$errorCount}, —Å—Ç—Ä–∞–Ω–∏—Ü {$pageCount}");

        $totalProcessed += $processedCount;
        $totalCreated += $createdCount;
        $totalUpdated += $updatedCount;
        $totalErrors += $errorCount;
    }
}
